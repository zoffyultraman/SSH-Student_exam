<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 对客户端请求的静态资源如图片、JS文件等的请求交由默认的servlet进行处理 -->
	<mvc:default-servlet-handler/>

   <!-- 自动去扫描base-pack下面或者子包下面的java文件，如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean -->
   <context:component-scan base-package="com.ite.smvcDemo.controller"/> 
   
   <!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置。 -->
   <mvc:annotation-driven />

	<!-- 
   	用InternalResourceViewResolver方式处理完后
   	跳转到p:prefix=""（前缀） + [resultValue](方法返回值) + p:suffix=""（后缀）
    -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	        <!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
	        <property name="prefix" value="/WEB-INF/view/"/>
	        <property name="suffix" value=".jsp"/>
	</bean>
	<!-- 静态资源访问 -->
   	<mvc:resources location="/lib/" mapping="/lib/**"/>
   	<mvc:resources location="/images/" mapping="/images/**"/>
   	<mvc:resources location="/stylesheets/" mapping="/stylesheets/**"/>
   	<mvc:resources location="/template/" mapping="/template/**"/>
   	
	<!--以上两句就是设置spring的拦截器不对lib文件夹与images,stylesheets文件夹的文件进行拦截-->
	
	<!--文件上传配置-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	
	<!-- 国际化 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- <property name="basenames">  
            <list> 
            	<value>i18n/messages</value>  
                <value>i18n/ValidationMessages</value>  
            </list>  
        </property>   -->
        
		 <property name="basenames" value="i18n.message"></property> 
	</bean>
	
	<!-- JSR 303 Validator -->  
    <!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">  
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" /> 
        <property name="validationMessageSource" ref="messageSource"/>   
    </bean>  
  
    <mvc:annotation-driven validator="validator" />   -->
	
	
	<!-- 校验 -->
	 <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/> 
	
	<context:component-scan base-package="com.ite.smvcDemo.dao" />
	<context:component-scan base-package="com.ite.smvcDemo.service" />
	<context:property-placeholder location="classpath:jdbc.properties" />
	
<!-- 	配置文件的根元素 -->
<!--JNDI -->
    <bean id="myDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">  
            <value>java:comp/env/jdbc/mysqlDB</value>  
        </property>  
    </bean> 
	
		
	<!-- <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driverClassName}"/>
	    <property name="url" value="${jdbc.url}"/>
	    <property name="username" value="${jdbc.username}"/>
	    <property name="password" value="${jdbc.password}"/>
  	</bean>	  -->
	
	<!-- 配置hibernate到spring中-->	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="packagesToScan" value="com.ite.smvcDemo.entity"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
                </prop>
				<prop key="hibernate.show_sql">
					true
                </prop>
			</props>
		</property>
	</bean>
	
	<!--  -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 对@Transactional这个注解进行的驱动，这是基于注解的方式使用事务配置声明 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 配置事务管理-->	
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    	<property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- 配置登陆拦截器实现登陆控制 -->
     <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<!-- 需排除拦截的地址 -->
			<mvc:exclude-mapping path="/images/**"/>
			<mvc:exclude-mapping path="/lib/**"/>
			<mvc:exclude-mapping path="/stylesheets/**"/>
			<bean class="com.ite.smvcDemo.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>
